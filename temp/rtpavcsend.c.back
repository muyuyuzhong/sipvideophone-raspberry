    #include <ortp/ortp.h>  
    #include <signal.h>  
    #include <stdlib.h>  
    #include <sys/types.h>  
    #include <sys/time.h>  
    #include <stdio.h>  
    #define Y_PLOAD_TYPE 96 //H.264  
    #define MAX_RTP_PKT_LENGTH 1400  
    #define DefaultTimestampIncrement 3600 //(90000/25)  
    uint32_t g_userts=0;  

    /**  初始化    
     *      
     *   主要用于对ortp以及其它参数进行初始化    
     *   @param:  char * ipStr 目的端IP地址描述串    
     *   @param:  iint port 目的端RTP监听端口    
     *   @return:  RtpSession * 返回指向RtpSession对象的指针,如果为NULL，则初始化失败    
     *   @note:       
     */     
    RtpSession * rtpInit( char  * ipStr, int  port)  
    {  
        RtpSession *session;   
        char  *ssrc;  
        printf("********oRTP for H.264 Init********\n");  
      
        ortp_init();  
        ortp_scheduler_init();  
        //ortp_set_log_level_mask(NULL, ORTP_MESSAGE|ORTP_WARNING|ORTP_ERROR);
        rtp_profile_set_payload(&av_profile,96,&payload_type_h264);
        session=rtp_session_new(RTP_SESSION_SENDONLY);    
      
        rtp_session_set_scheduling_mode(session,1);  
        rtp_session_set_blocking_mode(session,0);  
        //rtp_session_set_connected_mode(session,TRUE);  
        rtp_session_set_remote_addr(session,ipStr,port);  
        rtp_session_set_payload_type(session,Y_PLOAD_TYPE);  
      
        ssrc=getenv("SSRC");  
        if (ssrc!=NULL) {  
            printf("using SSRC=%i.\n",atoi(ssrc));  
            // 设置输出流的SSRC。不做此步的话将会给个随机值   
            rtp_session_set_ssrc(session,atoi(ssrc));  
        }  
        return  session;  
    }  
    /**  结束ortp的发送，释放资源    
     *      
     *   @param:  RtpSession *session RTP会话对象的指针    
     *   @return:  0表示成功    
     *   @note:        
     */      
    int  rtpExit(RtpSession *session)     
    {   
        printf("********oRTP for H.264 Exit********\n");    
        g_userts = 0;     
             
        rtp_session_destroy(session);     
        ortp_exit();     
        ortp_global_stats_display();     
        
         return  0;     
    }     
    /**  发送rtp数据包    
     *      
     *   主要用于发送rtp数据包    
     *   @param:  RtpSession *session RTP会话对象的指针    
     *   @param:  const char *buffer 要发送的数据的缓冲区地址    
      *   @param: int len 要发送的数据长度    
     *   @return:  int 实际发送的数据包数目    
     *   @note:     如果要发送的数据包长度大于BYTES_PER_COUNT，本函数内部会进行分包处理    
     */     
    int  rtpSend(RtpSession *session, char  *buffer,  int  len)  
    {    
        int  sendBytes = 0;   
        int status;         
        uint32_t valid_len=len-4;  
        unsigned char NALU=buffer[4];  
           
        //printf("send len=%d\n",len);  
      
        //如果数据小于MAX_RTP_PKT_LENGTH字节，直接发送：单一NAL单元模式  
        if(valid_len <= MAX_RTP_PKT_LENGTH)  
        {  
            sendBytes = rtp_session_send_with_ts(session,  
                                                 &buffer[4],  
                                                 valid_len,  
                                                 g_userts);  
            return sendBytes;  
        }  
        else if (valid_len > MAX_RTP_PKT_LENGTH)  
        {  
            //切分为很多个包发送，每个包前要对头进行处理，如第一个包  
            valid_len -= 1;  
            int k=0,l=0;  
            k=valid_len/MAX_RTP_PKT_LENGTH;  
            l=valid_len%MAX_RTP_PKT_LENGTH;  
            int t=0;  
            int pos=5;  
            if(l!=0)  
            {  
                k=k+1;  
            }  
            while(t<k)//||(t==k&&l>0))  
            {  
                if(t<(k-1))//(t<k&&l!=0)||(t<(k-1))&&(l==0))//(0==t)||(t<k&&0!=l))  
                {  
                    buffer[pos-2]=(NALU & 0x60)|28;  
                    buffer[pos-1]=(NALU & 0x1f);  
                    if(0==t)  
                    {  
                        buffer[pos-1]|=0x80;  
                    }  
                    sendBytes = rtp_session_send_with_ts(session,  
                                                         &buffer[pos-2],  
                                                         MAX_RTP_PKT_LENGTH+2,  
                                                         g_userts);  
                    t++;  
                    pos+=MAX_RTP_PKT_LENGTH;  
                }  
                else //if((k==t&&l>0)||((t==k-1)&&l==0))  
                {  
                    int iSendLen;  
                    if(l>0)  
                    {  
                        iSendLen=valid_len-t*MAX_RTP_PKT_LENGTH;  
                    }  
                    else  
                        iSendLen=MAX_RTP_PKT_LENGTH;  
                    buffer[pos-2]=(NALU & 0x60)|28;  
                    buffer[pos-1]=(NALU & 0x1f);  
                    buffer[pos-1]|=0x40;  
                    sendBytes = rtp_session_send_with_ts(session,  
                                                         &buffer[pos-2],  
                                                         iSendLen+2,  
                                                         g_userts);  
                    t++;  
                }  
            }  
        }  
      
        g_userts += DefaultTimestampIncrement;//timestamp increase  
        return  len;  
    }  
    
    
